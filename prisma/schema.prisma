// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique 
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notifications Notification[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  refresh_token_expires_in Int?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Contest {
  id        Int      @id @default(autoincrement())
  title     String
  site      String
  startTime DateTime
  endTime   DateTime
  duration  String
  url       String @unique
  isPast    Boolean @default(false)
  notifications Notification[]
  @@index([startTime])
  @@index([isPast])
}

model Notification {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail     String
  contest    Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId  Int
  notified   Boolean  @default(false) // Whether the email has been sent
  notifyAt   DateTime 
  createdAt  DateTime @default(now())

  @@unique([userEmail, contestId]) // Prevent duplicate notifications
}

